// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id             String  @id @default(auto()) @map("_id") @db.ObjectId
  email          String  @unique
  firstName      String?
  middleName     String?
  lastName       String?
  avatarUrl      String?
  hashedPassword String?

  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // Embedded
  followers      UserFollower[]
  followed       UserFollow[]

  // Relations
  posts          Post[]
  postComments   PostComment[]
  postLikes      PostLike[]
  dailies        Daily[]

  createdRoles   Role[] @relation("CreatedByUser")
  roleId         String @db.ObjectId
  role           Role @relation("assignedRoles",fields: [roleId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  // Unique Constraint
  @@unique([firstName, middleName, lastName])
}

type UserFollower {
  userId String
}

type UserFollow {
  userId String
}

model Role {
  id           String @id @default(auto()) @map("_id") @db.ObjectId
  title        String @unique
  position     Int
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  permissions  Json?

  // Explicit ordered array of user IDs (this is what you'll update via MongoDB)
  userIds      String[] @db.ObjectId

  // Relations
  createdById  String @db.ObjectId
  createdBy    User @relation("CreatedByUser", fields: [createdById], references: [id], onDelete: NoAction, onUpdate: NoAction)

  users User[] @relation("assignedRoles")
}

model Post {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  content      String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Embedded
  postImages   PostImage[]

  // Relations
  userId       String @db.ObjectId
  user         User @relation(fields: [userId], references: [id], onDelete: Cascade)

  postComments PostComment[]
  postLikes    PostLike[]
}

type PostImage {
  id     String
  postId String
  url    String
}

model PostComment {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  comment   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  postId    String @db.ObjectId
  post      Post   @relation(fields: [postId], references: [id], onDelete: Cascade)

  userId    String @db.ObjectId
  user      User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model PostLike {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  emoji      String
  emoji_name String
  emoji_id   String

  // Relations
  postId     String @db.ObjectId
  post       Post   @relation(fields: [postId], references: [id], onDelete: Cascade)

  userId     String @db.ObjectId
  user       User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Daily {
  id                    String @id @default(auto()) @map("_id") @db.ObjectId
  title                 String
  dailyurl              String

  imageOpacity          String?
  imageBlur             String?
  imageBlurFace         String?
  imageSharpen          String?
  imageBrightness       String?
  imageVibrance         String?
  imageAngle            String?

  textContent           String?
  textPositionX         String?
  textPositionY         String?
  textFontSize          String?
  textColor             String?

  imageRemoveBackground Boolean @default(false)
  imageZoomPan          Boolean @default(false)
  imageGrayScale        Boolean @default(false)
  isMyDay               Boolean @default(false)

  userId                String @db.ObjectId
  user       User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
}