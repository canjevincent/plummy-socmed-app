// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id             String  @id @default(auto()) @map("_id") @db.ObjectId
  email          String  @unique
  firstName      String?
  middleName     String?
  lastName       String?
  avatarUrl      String?
  hashedPassword String?

  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // Embedded
  followers      UserFollower[]
  followed       UserFollow[]

  // Relations
  posts          Post[]
  postComments   PostComment[]
  createdRoles   Role[] @relation("CreatedByUser")

  roleId         String @db.ObjectId
  role           Role @relation("assignedRoles",fields: [roleId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  // Unique Constraint
  @@unique([firstName, middleName, lastName])
}

type UserFollower {
  userId String
}

type UserFollow {
  userId String
}

model Role {
  id           String @id @default(auto()) @map("_id") @db.ObjectId
  title        String @unique
  position     Int
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Embedded
  permissions  Permission[]

  // Explicit ordered array of user IDs (this is what you'll update via MongoDB)
  userIds      String[] @db.ObjectId

  // Relations
  createdById  String @db.ObjectId
  createdBy    User @relation("CreatedByUser", fields: [createdById], references: [id], onDelete: NoAction, onUpdate: NoAction)

  users User[] @relation("assignedRoles")
}

type Permission {
  authorization String
}

model Post {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  content      String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Embedded
  postImages   PostImage[]

  // Relations
  userId       String @db.ObjectId
  user         User @relation(fields: [userId], references: [id], onDelete: Cascade)

  postComments PostComment[]
}

type PostImage {
  id     String
  postId String
  url    String
}

model PostComment {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  comment   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  postId    String @db.ObjectId
  post      Post   @relation(fields: [postId], references: [id], onDelete: Cascade)

  userId    String @db.ObjectId
  user      User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}